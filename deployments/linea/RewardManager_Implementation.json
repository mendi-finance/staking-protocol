{
  "address": "0x1AC9d64F283A947B69b9F5de6F1D6e6bfE5F6101",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lynxAmount",
          "type": "uint256"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "olynx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sMendi",
      "outputs": [
        {
          "internalType": "contract StakedDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uMendi",
      "outputs": [
        {
          "internalType": "contract StakedDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d759c77238e9cb856d6769a8b8f9c8e746751d759f147d1fe7bc4cd28d31025",
  "receipt": {
    "to": null,
    "from": "0x57cd331C7b2c7582625810465Ea3CF9bdcA21236",
    "contractAddress": "0x1AC9d64F283A947B69b9F5de6F1D6e6bfE5F6101",
    "transactionIndex": 118,
    "gasUsed": "1008187",
    "logsBloom": "0x
    "blockHash": "0xf2942ea4bfe7b9b10de35747299d7aee3a89e1a7a8d7973e11cdfe84653e6140",
    "transactionHash": "0x1d759c77238e9cb856d6769a8b8f9c8e746751d759f147d1fe7bc4cd28d31025",
    "logs": [],
    "blockNumber": 3256698,
    "cumulativeGasUsed": "18556250",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "9fe576aac62738aa286d4ae055db1d40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lynxAmount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olynx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sMendi\",\"outputs\":[{\"internalType\":\"contract StakedDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uMendi\",\"outputs\":[{\"internalType\":\"contract StakedDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardManagerV2.sol\":\"RewardManagerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Distributor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/SafeToken.sol\\\";\\r\\nimport \\\"./interfaces/IClaimable.sol\\\";\\r\\n\\r\\nabstract contract Distributor is OwnableUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeToken for address;\\r\\n\\r\\n    uint256 public constant MANTISSA2 = 2 ** 160;\\r\\n\\r\\n    struct Recipient {\\r\\n        uint256 lastShareIndex;\\r\\n        uint256 credit;\\r\\n    }\\r\\n    // token => account => recipient\\r\\n    mapping(address => mapping(address => Recipient)) public recipients;\\r\\n\\r\\n    // account => shares\\r\\n    mapping(address => uint256) public shares;\\r\\n\\r\\n    // token => shareIndex\\r\\n    mapping(address => uint256) public shareIndex;\\r\\n\\r\\n    // token => totalShares\\r\\n    uint256 public totalShares;\\r\\n\\r\\n    event ClaimableUpdate(address oldClaimable, address newClaimable);\\r\\n    event UpdateShareIndex(address indexed token, uint256 shareIndex);\\r\\n    event UpdateCredit(\\r\\n        address indexed token,\\r\\n        address indexed account,\\r\\n        uint256 lastShareIndex,\\r\\n        uint256 credit\\r\\n    );\\r\\n    event EditRecipient(\\r\\n        address indexed account,\\r\\n        uint256 shares,\\r\\n        uint256 totalShares\\r\\n    );\\r\\n    event Claim(address indexed token, address indexed account, uint256 amount);\\r\\n\\r\\n    /// @notice Reward holder where can be claimed\\r\\n    address public claimable;\\r\\n\\r\\n    /// @notice Added reward tokens\\r\\n    address[] public tokens;\\r\\n    /// @notice Flag to check if reward token added before\\r\\n    mapping(address => bool) public tokenExists;\\r\\n\\r\\n    // Sets in initialize.\\r\\n    bool internal _notEntered;\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"Distributor: REENTERED\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function __Distributor_init(address claimable_) internal onlyInitializing {\\r\\n        __Ownable_init();\\r\\n        __Distributor_init_unchained(claimable_);\\r\\n    }\\r\\n\\r\\n    function __Distributor_init_unchained(\\r\\n        address claimable_\\r\\n    ) internal onlyInitializing {\\r\\n        claimable = claimable_;\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /* Admin functions */\\r\\n    function _whitelistToken(address token_) external onlyOwner {\\r\\n        require(\\r\\n            token_ != address(0),\\r\\n            \\\"Distributor: reward token cannot be zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            !tokenExists[token_],\\r\\n            \\\"Distributor: reward token already exists\\\"\\r\\n        );\\r\\n\\r\\n        tokens.push(token_);\\r\\n        tokenExists[token_] = true;\\r\\n    }\\r\\n\\r\\n    function _setClaimable(address newClaimable) external onlyOwner {\\r\\n        require(\\r\\n            newClaimable != address(0),\\r\\n            \\\"Distributor: claimable cannot be zero\\\"\\r\\n        );\\r\\n        address oldClaimable = claimable;\\r\\n\\r\\n        claimable = newClaimable;\\r\\n\\r\\n        emit ClaimableUpdate(oldClaimable, newClaimable);\\r\\n    }\\r\\n\\r\\n    function updateShareIndex(\\r\\n        address token\\r\\n    ) public virtual nonReentrant returns (uint256 _shareIndex) {\\r\\n        if (totalShares == 0) return shareIndex[token];\\r\\n\\r\\n        uint256 amount = claimFromClaimableInternal(token);\\r\\n\\r\\n        if (amount == 0) return shareIndex[token];\\r\\n\\r\\n        _shareIndex = amount.mul(MANTISSA2).div(totalShares).add(\\r\\n            shareIndex[token]\\r\\n        );\\r\\n        shareIndex[token] = _shareIndex;\\r\\n        emit UpdateShareIndex(token, _shareIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * claim token from claimable\\r\\n     * calculate after-before amount in any case if there is a fee etc.\\r\\n     * @param token Reward token to be claimed\\r\\n     */\\r\\n    function claimFromClaimableInternal(\\r\\n        address token\\r\\n    ) internal returns (uint256 claimedAmount) {\\r\\n        uint256 beforeAmount = token.balanceOf(address(this));\\r\\n        IClaimable(claimable).claim(token);\\r\\n        uint256 afterAmount = token.balanceOf(address(this));\\r\\n\\r\\n        claimedAmount = afterAmount - beforeAmount;\\r\\n    }\\r\\n\\r\\n    function updateCredit(\\r\\n        address token,\\r\\n        address account\\r\\n    ) public returns (uint256 credit) {\\r\\n        require(tokenExists[token], \\\"Distributor: Invalid token\\\");\\r\\n\\r\\n        uint256 _shareIndex = updateShareIndex(token);\\r\\n        if (_shareIndex == 0) return 0;\\r\\n\\r\\n        Recipient storage recipient = recipients[token][account];\\r\\n        uint256 _shares = shares[account];\\r\\n\\r\\n        credit =\\r\\n            recipient.credit +\\r\\n            _shareIndex.sub(recipient.lastShareIndex).mul(_shares) /\\r\\n            MANTISSA2;\\r\\n        recipient.lastShareIndex = _shareIndex;\\r\\n        recipient.credit = credit;\\r\\n\\r\\n        emit UpdateCredit(token, account, _shareIndex, credit);\\r\\n    }\\r\\n\\r\\n    function claim(address token) external returns (uint256 amount) {\\r\\n        return claimInternal(token, msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimAll() external returns (uint256[] memory amounts) {\\r\\n        amounts = new uint256[](tokens.length);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            amounts[i] = claimInternal(tokens[i], msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimInternal(\\r\\n        address token,\\r\\n        address account\\r\\n    ) internal returns (uint256 amount) {\\r\\n        require(tokenExists[token], \\\"Distributor: Invalid token\\\");\\r\\n\\r\\n        amount = updateCredit(token, account);\\r\\n        if (amount > 0) {\\r\\n            recipients[token][account].credit = 0;\\r\\n\\r\\n            if (amount > 0) {\\r\\n                IERC20(token).transfer(account, amount);\\r\\n                emit Claim(token, account, amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _editRecipientInternal(address account, uint256 shares_) internal {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            updateCredit(tokens[i], account);\\r\\n        }\\r\\n\\r\\n        uint256 prevShares = shares[account];\\r\\n        uint256 _totalShares = shares_ > prevShares\\r\\n            ? totalShares.add(shares_ - prevShares)\\r\\n            : totalShares.sub(prevShares - shares_);\\r\\n        totalShares = _totalShares;\\r\\n        shares[account] = shares_;\\r\\n        emit EditRecipient(account, shares_, _totalShares);\\r\\n    }\\r\\n\\r\\n    /** Getters */\\r\\n    function getTokens() public view returns (address[] memory) {\\r\\n        return tokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x380e96ebe31ae5a0a665b12427e188f5cbdcea9a9723b768897c71a0d56ba005\",\"license\":\"UNLICENSED\"},\"contracts/RewardManagerV2.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/LynxInterfaces.sol\\\";\\r\\nimport \\\"./libraries/SafeToken.sol\\\";\\r\\n\\r\\nimport \\\"./StakedDistributor.sol\\\";\\r\\n\\r\\ncontract RewardManagerV2 is OwnableUpgradeable {\\r\\n    using SafeToken for address;\\r\\n\\r\\n    StakedDistributor public constant sMendi =\\r\\n        StakedDistributor(0x150b1e51738CdF0cCfe472594C62d7D6074921CA);\\r\\n    StakedDistributor public constant uMendi =\\r\\n        StakedDistributor(0xcf8deDCdC62317beAEdfBee3C77C08425F284486);\\r\\n\\r\\n    /* Tokens */\\r\\n    address public constant mendi = 0x43E8809ea748EFf3204ee01F08872F063e44065f;\\r\\n    address public constant usdc = 0x176211869cA2b568f2A7D4EE941E073a821EE1ff;\\r\\n    address public constant olynx = 0x63349BA5E1F71252eCD56E8F950D1A518B400b60;\\r\\n\\r\\n    /* Lynx */\\r\\n    IRouter public immutable router =\\r\\n        IRouter(0x610D2f07b7EdC67565160F587F37636194C34E74);\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    function addRewards(uint256 usdcAmount, uint256 lynxAmount) public {\\r\\n        // calculate supplies\\r\\n        uint256 sMendiSupply = sMendi.totalSupply();\\r\\n        uint256 uMendiSupply = uMendi.totalSupply();\\r\\n        uint256 totalSupply = sMendiSupply + uMendiSupply;\\r\\n\\r\\n        // add lynx\\r\\n        if (lynxAmount > 0) {\\r\\n            pullTokenInternal(olynx, lynxAmount);\\r\\n            addTokenRewardInternal(olynx, uMendiSupply, totalSupply);\\r\\n        }\\r\\n\\r\\n        // add usdc\\r\\n        if (usdcAmount > 0) {\\r\\n            pullTokenInternal(usdc, usdcAmount);\\r\\n            addUSDCRewardInternal(uMendiSupply, totalSupply);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pullTokenInternal(address token, uint256 amount) internal {\\r\\n        if (amount == type(uint256).max) {\\r\\n            amount = token.balanceOf(msg.sender);\\r\\n        }\\r\\n\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function addTokenRewardInternal(\\r\\n        address token,\\r\\n        uint256 uMendiSupply,\\r\\n        uint256 totalSupply\\r\\n    ) internal {\\r\\n        uint256 amount = token.myBalance();\\r\\n        if (amount == 0) return;\\r\\n\\r\\n        // add to uMendi\\r\\n        uint256 uMendiAmount = (amount * uMendiSupply) / totalSupply;\\r\\n        address uRewardHolder = uMendi.claimable();\\r\\n        token.safeTransfer(uRewardHolder, uMendiAmount);\\r\\n\\r\\n        // add to sMendi\\r\\n        uint256 sMendiAmount = amount = token.myBalance();\\r\\n        address sRewardHolder = sMendi.claimable();\\r\\n        token.safeTransfer(sRewardHolder, sMendiAmount);\\r\\n    }\\r\\n\\r\\n    function addUSDCRewardInternal(\\r\\n        uint256 uMendiSupply,\\r\\n        uint256 totalSupply\\r\\n    ) internal {\\r\\n        uint256 amount = usdc.myBalance();\\r\\n        if (amount == 0) return;\\r\\n\\r\\n        // add to uMendi\\r\\n        uint256 uMendiUSDCAmount = (amount * uMendiSupply) / totalSupply;\\r\\n        address uRewardHolder = uMendi.claimable();\\r\\n        usdc.safeTransfer(uRewardHolder, uMendiUSDCAmount);\\r\\n\\r\\n        // swap usdc to mendi\\r\\n        uint256 sMendiUSDCAmount = usdc.myBalance();\\r\\n        swapUSDCtoMendiInternal(sMendiUSDCAmount);\\r\\n\\r\\n        // add to sMendi\\r\\n        uint256 mendiAmount = mendi.myBalance();\\r\\n        address sRewardHolder = sMendi.claimable();\\r\\n        mendi.safeTransfer(sRewardHolder, mendiAmount);\\r\\n    }\\r\\n\\r\\n    function swapUSDCtoMendiInternal(uint256 usdcAmount) internal {\\r\\n        IRouter.route[] memory path = new IRouter.route[](1);\\r\\n        path[0] = IRouter.route({from: usdc, to: mendi, stable: false});\\r\\n\\r\\n        usdc.safeApprove(address(router), usdcAmount);\\r\\n        router.swapExactTokensForTokens(\\r\\n            usdcAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x68ac1dda90d50901d2dd4850bb43c88c00f32b9155ce462322f9b2e56e79cc35\",\"license\":\"UNLICENSED\"},\"contracts/StakedDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/SafeToken.sol\\\";\\r\\nimport \\\"./Distributor.sol\\\";\\r\\n\\r\\ncontract StakedDistributor is Distributor, ERC20Upgradeable {\\r\\n    using SafeToken for address;\\r\\n    struct Withdrawal {\\r\\n        uint256 amount;\\r\\n        uint256 releaseTime;\\r\\n    }\\r\\n\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    uint256 public withdrawalPendingTime;\\r\\n    mapping(address => Withdrawal) public withdrawal;\\r\\n\\r\\n    address public underlying;\\r\\n\\r\\n    function initialize(\\r\\n        address claimable_,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address underlying_\\r\\n    ) public initializer {\\r\\n        __Distributor_init(claimable_);\\r\\n        __ERC20_init(name, symbol);\\r\\n\\r\\n        underlying = underlying_;\\r\\n        withdrawalPendingTime = 7 * 1 days;\\r\\n    }\\r\\n\\r\\n    /* Admin functions */\\r\\n    function _setWithdrawalPendingTime(\\r\\n        uint256 withdrawalPendingTime_\\r\\n    ) public onlyOwner {\\r\\n        withdrawalPendingTime = withdrawalPendingTime_;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public {\\r\\n        underlying.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        _mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        if (amount > 0) {\\r\\n            _burn(msg.sender, amount);\\r\\n\\r\\n            Withdrawal storage withdrawal_ = withdrawal[msg.sender];\\r\\n            withdrawal_.amount = withdrawal_.amount + amount;\\r\\n            withdrawal_.releaseTime = block.timestamp + withdrawalPendingTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        Withdrawal storage withdrawal_ = withdrawal[msg.sender];\\r\\n        require(\\r\\n            block.timestamp >= withdrawal_.releaseTime,\\r\\n            \\\"StakedDistributor: not released\\\"\\r\\n        );\\r\\n        uint256 amount = withdrawal_.amount;\\r\\n        withdrawal_.amount = 0;\\r\\n        underlying.safeTransfer(msg.sender, amount);\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 /* amount */\\r\\n    ) internal override {\\r\\n        if (from != address(0)) {\\r\\n            _editRecipientInternal(from, balanceOf(from));\\r\\n        }\\r\\n\\r\\n        if (to != address(0)) {\\r\\n            _editRecipientInternal(to, balanceOf(to));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x498734b1e04ae99dac1e5e09848eddd9bdf532c4347d627806a85ba0f1c0525f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IClaimable.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IClaimable {\\r\\n    function claim(address token) external returns (uint256 amount);\\r\\n\\r\\n    event Claim(address indexed token, address indexed account, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x9195f44919e86de0e1e613d8809543ef8b0c78d788e4d79fff7b2119a77da2b9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/LynxInterfaces.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IRouter {\\r\\n    struct route {\\r\\n        address from;\\r\\n        address to;\\r\\n        bool stable;\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IVoter {\\r\\n    function gauges(address pair) external view returns (address gauge);\\r\\n}\\r\\n\\r\\ninterface IGauge {\\r\\n    function stake() external view returns (address token);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256 amount);\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositAll() external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward(address account, address[] memory tokens) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9c806c121af29998297d36abe912e046b9c9e9eec0278859061fd9b78c595249\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface ERC20Interface {\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary SafeToken {\\r\\n    function myBalance(address token) internal view returns (uint256) {\\r\\n        return ERC20Interface(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address token,\\r\\n        address user\\r\\n    ) internal view returns (uint256) {\\r\\n        return ERC20Interface(token).balanceOf(user);\\r\\n    }\\r\\n\\r\\n    function safeApprove(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"!safeApprove\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"!safeTransfer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"!safeTransferFrom\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"!safeTransferETH\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x839614919c7766501fc9e122ae508ee4fdb5f546cc8754023dd47380cb600bce\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405273610d2f07b7edc67565160f587f37636194c34e7460805234801561002857600080fd5b506080516111486100526000396000818161018c01528181610d1b0152610d5701526111486000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638129fc1c116100715780638129fc1c146101405780638da5cb5b14610148578063b093332014610159578063f2fde38b14610174578063f887ea4014610187578063fc41aa09146101ae57600080fd5b806333f5beef146100ae5780633e413bee146100e55780635f33f28114610100578063655c23c21461011b578063715018a614610136575b600080fd5b6100c973150b1e51738cdf0ccfe472594c62d7d6074921ca81565b6040516001600160a01b03909116815260200160405180910390f35b6100c973176211869ca2b568f2a7d4ee941e073a821ee1ff81565b6100c97343e8809ea748eff3204ee01f08872f063e44065f81565b6100c97363349ba5e1f71252ecd56e8f950d1a518b400b6081565b61013e6101c1565b005b61013e6101d5565b6033546001600160a01b03166100c9565b6100c973cf8dedcdc62317beaedfbee3c77c08425f28448681565b61013e610182366004610edb565b6102eb565b6100c97f000000000000000000000000000000000000000000000000000000000000000081565b61013e6101bc366004610ef8565b610361565b6101c96104db565b6101d36000610535565b565b600054610100900460ff16158080156101f55750600054600160ff909116105b8061020f5750303b15801561020f575060005460ff166001145b6102775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561029a576000805461ff0019166101001790555b6102a2610587565b80156102e8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6102f36104db565b6001600160a01b0381166103585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161026e565b6102e881610535565b600073150b1e51738cdf0ccfe472594c62d7d6074921ca6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d99190610f1a565b9050600073cf8dedcdc62317beaedfbee3c77c08425f2844866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104539190610f1a565b905060006104618284610f49565b905083156104a6576104877363349ba5e1f71252ecd56e8f950d1a518b400b60856105b6565b6104a67363349ba5e1f71252ecd56e8f950d1a518b400b6083836105ef565b84156104d4576104ca73176211869ca2b568f2a7d4ee941e073a821ee1ff866105b6565b6104d48282610768565b5050505050565b6033546001600160a01b031633146101d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166105ae5760405162461bcd60e51b815260040161026e90610f61565b6101d3610929565b6000198114156105d6576105d36001600160a01b03831633610959565b90505b6105eb6001600160a01b0383163330846109ce565b5050565b6000610603846001600160a01b0316610ae6565b9050806106105750505050565b60008261061d8584610fac565b6106279190610fcb565b9050600073cf8dedcdc62317beaedfbee3c77c08425f2844866001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a19190610fed565b90506106b76001600160a01b0387168284610b57565b60006106cb876001600160a01b0316610ae6565b9350839050600073150b1e51738cdf0ccfe472594c62d7d6074921ca6001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190610fed565b905061075e6001600160a01b0389168284610b57565b5050505050505050565b600061078773176211869ca2b568f2a7d4ee941e073a821ee1ff610ae6565b90508061079357505050565b6000826107a08584610fac565b6107aa9190610fcb565b9050600073cf8dedcdc62317beaedfbee3c77c08425f2844866001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190610fed565b905061084573176211869ca2b568f2a7d4ee941e073a821ee1ff8284610b57565b600061086473176211869ca2b568f2a7d4ee941e073a821ee1ff610ae6565b905061086f81610c5b565b600061088e7343e8809ea748eff3204ee01f08872f063e44065f610ae6565b9050600073150b1e51738cdf0ccfe472594c62d7d6074921ca6001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190610fed565b905061075e7343e8809ea748eff3204ee01f08872f063e44065f8284610b57565b600054610100900460ff166109505760405162461bcd60e51b815260040161026e90610f61565b6101d333610535565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a0823190602401602060405180830381865afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c79190610f1a565b9392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610a32919061100a565b6000604051808303816000865af19150503d8060008114610a6f576040519150601f19603f3d011682016040523d82523d6000602084013e610a74565b606091505b5091509150818015610a9e575080511580610a9e575080806020019051810190610a9e9190611045565b610ade5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b604482015260640161026e565b505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190610f1a565b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610bb3919061100a565b6000604051808303816000865af19150503d8060008114610bf0576040519150601f19603f3d011682016040523d82523d6000602084013e610bf5565b606091505b5091509150818015610c1f575080511580610c1f575080806020019051810190610c1f9190611045565b6104d45760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b604482015260640161026e565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610c725750506040805160608101825273176211869ca2b568f2a7d4ee941e073a821ee1ff81527343e8809ea748eff3204ee01f08872f063e44065f60208201526000918101829052825192935091839190610cf657610cf6611067565b6020908102919091010152610d4073176211869ca2b568f2a7d4ee941e073a821ee1ff7f000000000000000000000000000000000000000000000000000000000000000084610dc3565b604051631e82ecdb60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f41766d890610d9590859060009086903090429060040161107d565b600060405180830381600087803b158015610daf57600080fd5b505af1158015610ade573d6000803e3d6000fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610e1f919061100a565b6000604051808303816000865af19150503d8060008114610e5c576040519150601f19603f3d011682016040523d82523d6000602084013e610e61565b606091505b5091509150818015610e8b575080511580610e8b575080806020019051810190610e8b9190611045565b6104d45760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b604482015260640161026e565b6001600160a01b03811681146102e857600080fd5b600060208284031215610eed57600080fd5b81356109c781610ec6565b60008060408385031215610f0b57600080fd5b50508035926020909101359150565b600060208284031215610f2c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f5c57610f5c610f33565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615610fc657610fc6610f33565b500290565b600082610fe857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610fff57600080fd5b81516109c781610ec6565b6000825160005b8181101561102b5760208186018101518583015201611011565b8181111561103a576000828501525b509190910192915050565b60006020828403121561105757600080fd5b815180151581146109c757600080fd5b634e487b7160e01b600052603260045260246000fd5b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b818110156110e657855180516001600160a01b039081168552868201511686850152840151151584840152948401946060909201916001016110a9565b50506001600160a01b0388166060870152935061110292505050565b826080830152969550505050505056fea2646970667358221220b2d1e66908c7c9a148464d8cbc0995ead45b507884a6e94d24dc70ded8b6a0ef64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638129fc1c116100715780638129fc1c146101405780638da5cb5b14610148578063b093332014610159578063f2fde38b14610174578063f887ea4014610187578063fc41aa09146101ae57600080fd5b806333f5beef146100ae5780633e413bee146100e55780635f33f28114610100578063655c23c21461011b578063715018a614610136575b600080fd5b6100c973150b1e51738cdf0ccfe472594c62d7d6074921ca81565b6040516001600160a01b03909116815260200160405180910390f35b6100c973176211869ca2b568f2a7d4ee941e073a821ee1ff81565b6100c97343e8809ea748eff3204ee01f08872f063e44065f81565b6100c97363349ba5e1f71252ecd56e8f950d1a518b400b6081565b61013e6101c1565b005b61013e6101d5565b6033546001600160a01b03166100c9565b6100c973cf8dedcdc62317beaedfbee3c77c08425f28448681565b61013e610182366004610edb565b6102eb565b6100c97f000000000000000000000000000000000000000000000000000000000000000081565b61013e6101bc366004610ef8565b610361565b6101c96104db565b6101d36000610535565b565b600054610100900460ff16158080156101f55750600054600160ff909116105b8061020f5750303b15801561020f575060005460ff166001145b6102775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561029a576000805461ff0019166101001790555b6102a2610587565b80156102e8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6102f36104db565b6001600160a01b0381166103585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161026e565b6102e881610535565b600073150b1e51738cdf0ccfe472594c62d7d6074921ca6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d99190610f1a565b9050600073cf8dedcdc62317beaedfbee3c77c08425f2844866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104539190610f1a565b905060006104618284610f49565b905083156104a6576104877363349ba5e1f71252ecd56e8f950d1a518b400b60856105b6565b6104a67363349ba5e1f71252ecd56e8f950d1a518b400b6083836105ef565b84156104d4576104ca73176211869ca2b568f2a7d4ee941e073a821ee1ff866105b6565b6104d48282610768565b5050505050565b6033546001600160a01b031633146101d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166105ae5760405162461bcd60e51b815260040161026e90610f61565b6101d3610929565b6000198114156105d6576105d36001600160a01b03831633610959565b90505b6105eb6001600160a01b0383163330846109ce565b5050565b6000610603846001600160a01b0316610ae6565b9050806106105750505050565b60008261061d8584610fac565b6106279190610fcb565b9050600073cf8dedcdc62317beaedfbee3c77c08425f2844866001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a19190610fed565b90506106b76001600160a01b0387168284610b57565b60006106cb876001600160a01b0316610ae6565b9350839050600073150b1e51738cdf0ccfe472594c62d7d6074921ca6001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190610fed565b905061075e6001600160a01b0389168284610b57565b5050505050505050565b600061078773176211869ca2b568f2a7d4ee941e073a821ee1ff610ae6565b90508061079357505050565b6000826107a08584610fac565b6107aa9190610fcb565b9050600073cf8dedcdc62317beaedfbee3c77c08425f2844866001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190610fed565b905061084573176211869ca2b568f2a7d4ee941e073a821ee1ff8284610b57565b600061086473176211869ca2b568f2a7d4ee941e073a821ee1ff610ae6565b905061086f81610c5b565b600061088e7343e8809ea748eff3204ee01f08872f063e44065f610ae6565b9050600073150b1e51738cdf0ccfe472594c62d7d6074921ca6001600160a01b031663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190610fed565b905061075e7343e8809ea748eff3204ee01f08872f063e44065f8284610b57565b600054610100900460ff166109505760405162461bcd60e51b815260040161026e90610f61565b6101d333610535565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a0823190602401602060405180830381865afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c79190610f1a565b9392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610a32919061100a565b6000604051808303816000865af19150503d8060008114610a6f576040519150601f19603f3d011682016040523d82523d6000602084013e610a74565b606091505b5091509150818015610a9e575080511580610a9e575080806020019051810190610a9e9190611045565b610ade5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b604482015260640161026e565b505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190610f1a565b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610bb3919061100a565b6000604051808303816000865af19150503d8060008114610bf0576040519150601f19603f3d011682016040523d82523d6000602084013e610bf5565b606091505b5091509150818015610c1f575080511580610c1f575080806020019051810190610c1f9190611045565b6104d45760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b604482015260640161026e565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610c725750506040805160608101825273176211869ca2b568f2a7d4ee941e073a821ee1ff81527343e8809ea748eff3204ee01f08872f063e44065f60208201526000918101829052825192935091839190610cf657610cf6611067565b6020908102919091010152610d4073176211869ca2b568f2a7d4ee941e073a821ee1ff7f000000000000000000000000000000000000000000000000000000000000000084610dc3565b604051631e82ecdb60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f41766d890610d9590859060009086903090429060040161107d565b600060405180830381600087803b158015610daf57600080fd5b505af1158015610ade573d6000803e3d6000fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610e1f919061100a565b6000604051808303816000865af19150503d8060008114610e5c576040519150601f19603f3d011682016040523d82523d6000602084013e610e61565b606091505b5091509150818015610e8b575080511580610e8b575080806020019051810190610e8b9190611045565b6104d45760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b604482015260640161026e565b6001600160a01b03811681146102e857600080fd5b600060208284031215610eed57600080fd5b81356109c781610ec6565b60008060408385031215610f0b57600080fd5b50508035926020909101359150565b600060208284031215610f2c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f5c57610f5c610f33565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615610fc657610fc6610f33565b500290565b600082610fe857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610fff57600080fd5b81516109c781610ec6565b6000825160005b8181101561102b5760208186018101518583015201611011565b8181111561103a576000828501525b509190910192915050565b60006020828403121561105757600080fd5b815180151581146109c757600080fd5b634e487b7160e01b600052603260045260246000fd5b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b818110156110e657855180516001600160a01b039081168552868201511686850152840151151584840152948401946060909201916001016110a9565b50506001600160a01b0388166060870152935061110292505050565b826080830152969550505050505056fea2646970667358221220b2d1e66908c7c9a148464d8cbc0995ead45b507884a6e94d24dc70ded8b6a0ef64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/RewardManagerV2.sol:RewardManagerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/RewardManagerV2.sol:RewardManagerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1749,
        "contract": "contracts/RewardManagerV2.sol:RewardManagerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/RewardManagerV2.sol:RewardManagerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/RewardManagerV2.sol:RewardManagerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}