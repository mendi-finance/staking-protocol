{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Distributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./libraries/SafeToken.sol\";\nimport \"./interfaces/IClaimable.sol\";\n\nabstract contract Distributor is OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeToken for address;\n\n    uint256 public constant MANTISSA2 = 2 ** 160;\n\n    struct Recipient {\n        uint256 lastShareIndex;\n        uint256 credit;\n    }\n    // token => account => recipient\n    mapping(address => mapping(address => Recipient)) public recipients;\n\n    // account => shares\n    mapping(address => uint256) public shares;\n\n    // token => shareIndex\n    mapping(address => uint256) public shareIndex;\n\n    // token => totalShares\n    uint256 public totalShares;\n\n    event ClaimableUpdate(address oldClaimable, address newClaimable);\n    event UpdateShareIndex(address indexed token, uint256 shareIndex);\n    event UpdateCredit(\n        address indexed token,\n        address indexed account,\n        uint256 lastShareIndex,\n        uint256 credit\n    );\n    event EditRecipient(\n        address indexed account,\n        uint256 shares,\n        uint256 totalShares\n    );\n    event Claim(address indexed token, address indexed account, uint256 amount);\n\n    /// @notice Reward holder where can be claimed\n    address public claimable;\n\n    /// @notice Added reward tokens\n    address[] public tokens;\n    /// @notice Flag to check if reward token added before\n    mapping(address => bool) public tokenExists;\n\n    // Sets in initialize.\n    bool internal _notEntered;\n    modifier nonReentrant() {\n        require(_notEntered, \"Distributor: REENTERED\");\n        _notEntered = false;\n        _;\n        _notEntered = true;\n    }\n\n    function __Distributor_init(address claimable_) internal onlyInitializing {\n        __Ownable_init();\n        __Distributor_init_unchained(claimable_);\n    }\n\n    function __Distributor_init_unchained(\n        address claimable_\n    ) internal onlyInitializing {\n        claimable = claimable_;\n        _notEntered = true;\n    }\n\n    /* Admin functions */\n    function _whitelistToken(address token_) external onlyOwner {\n        require(\n            token_ != address(0),\n            \"Distributor: reward token cannot be zero address\"\n        );\n        require(\n            !tokenExists[token_],\n            \"Distributor: reward token already exists\"\n        );\n\n        tokens.push(token_);\n        tokenExists[token_] = true;\n    }\n\n    function _setClaimable(address newClaimable) external onlyOwner {\n        require(\n            newClaimable != address(0),\n            \"Distributor: claimable cannot be zero\"\n        );\n        address oldClaimable = claimable;\n\n        claimable = newClaimable;\n\n        emit ClaimableUpdate(oldClaimable, newClaimable);\n    }\n\n    function updateShareIndex(\n        address token\n    ) public virtual nonReentrant returns (uint256 _shareIndex) {\n        if (totalShares == 0) return shareIndex[token];\n\n        uint256 amount = claimFromClaimableInternal(token);\n\n        if (amount == 0) return shareIndex[token];\n\n        _shareIndex = amount.mul(MANTISSA2).div(totalShares).add(\n            shareIndex[token]\n        );\n        shareIndex[token] = _shareIndex;\n        emit UpdateShareIndex(token, _shareIndex);\n    }\n\n    /**\n     * claim token from claimable\n     * calculate after-before amount in any case if there is a fee etc.\n     * @param token Reward token to be claimed\n     */\n    function claimFromClaimableInternal(\n        address token\n    ) internal returns (uint256 claimedAmount) {\n        uint256 beforeAmount = token.balanceOf(address(this));\n        IClaimable(claimable).claim(token);\n        uint256 afterAmount = token.balanceOf(address(this));\n\n        claimedAmount = afterAmount - beforeAmount;\n    }\n\n    function updateCredit(\n        address token,\n        address account\n    ) public returns (uint256 credit) {\n        require(tokenExists[token], \"Distributor: Invalid token\");\n\n        uint256 _shareIndex = updateShareIndex(token);\n        if (_shareIndex == 0) return 0;\n\n        Recipient storage recipient = recipients[token][account];\n        uint256 _shares = shares[account];\n\n        credit =\n            recipient.credit +\n            _shareIndex.sub(recipient.lastShareIndex).mul(_shares) /\n            MANTISSA2;\n        recipient.lastShareIndex = _shareIndex;\n        recipient.credit = credit;\n\n        emit UpdateCredit(token, account, _shareIndex, credit);\n    }\n\n    function claim(address token) external returns (uint256 amount) {\n        return claimInternal(token, msg.sender);\n    }\n\n    function claimAll() external returns (uint256[] memory amounts) {\n        amounts = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            amounts[i] = claimInternal(tokens[i], msg.sender);\n        }\n    }\n\n    function claimInternal(\n        address token,\n        address account\n    ) internal returns (uint256 amount) {\n        require(tokenExists[token], \"Distributor: Invalid token\");\n\n        amount = updateCredit(token, account);\n        if (amount > 0) {\n            recipients[token][account].credit = 0;\n\n            if (amount > 0) {\n                IERC20(token).transfer(account, amount);\n                emit Claim(token, account, amount);\n            }\n        }\n    }\n\n    function _editRecipientInternal(address account, uint256 shares_) internal {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            updateCredit(tokens[i], account);\n        }\n\n        uint256 prevShares = shares[account];\n        uint256 _totalShares = shares_ > prevShares\n            ? totalShares.add(shares_ - prevShares)\n            : totalShares.sub(prevShares - shares_);\n        totalShares = _totalShares;\n        shares[account] = shares_;\n        emit EditRecipient(account, shares_, _totalShares);\n    }\n\n    /** Getters */\n    function getTokens() public view returns (address[] memory) {\n        return tokens;\n    }\n}\n"
    },
    "contracts/interfaces/IClaimable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface IClaimable {\n    function claim(address token) external returns (uint256 amount);\n\n    event Claim(address indexed token, address indexed account, uint256 amount);\n}\n"
    },
    "contracts/interfaces/VelocoreInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nbytes32 constant TOKEN_MASK = 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\nbytes32 constant ID_MASK = 0x00FFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\n\nuint256 constant ID_SHIFT = 160;\nbytes32 constant TOKENSPEC_MASK = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n\ntype Token is bytes32;\ntype TokenSpecType is bytes32;\n\nlibrary TokenSpec {\n    TokenSpecType constant ERC20 =\n        TokenSpecType.wrap(\n            0x0000000000000000000000000000000000000000000000000000000000000000\n        );\n\n    TokenSpecType constant ERC721 =\n        TokenSpecType.wrap(\n            0x0100000000000000000000000000000000000000000000000000000000000000\n        );\n\n    TokenSpecType constant ERC1155 =\n        TokenSpecType.wrap(\n            0x0200000000000000000000000000000000000000000000000000000000000000\n        );\n\n    TokenSpecType constant NATIVE =\n        TokenSpecType.wrap(\n            0xEE00000000000000000000000000000000000000000000000000000000000000\n        );\n}\n\nlibrary TokenLib {\n    using TokenLib for Token;\n    using TokenLib for bytes32;\n\n    function wrap(bytes32 data) internal pure returns (Token) {\n        return Token.wrap(data);\n    }\n\n    function unwrap(Token tok) internal pure returns (bytes32) {\n        return Token.unwrap(tok);\n    }\n\n    function addr(Token tok) internal pure returns (address) {\n        return address(uint160(uint256(tok.unwrap() & TOKEN_MASK)));\n    }\n\n    function id(Token tok) internal pure returns (uint256) {\n        return uint256((tok.unwrap() & ID_MASK) >> ID_SHIFT);\n    }\n\n    function spec(Token tok) internal pure returns (TokenSpecType) {\n        return TokenSpecType.wrap(tok.unwrap() & TOKENSPEC_MASK);\n    }\n}\n\nfunction toToken(IERC20 tok) pure returns (Token) {\n    return Token.wrap(bytes32(uint256(uint160(address(tok)))));\n}\n\nfunction toToken(\n    TokenSpecType spec_,\n    uint88 id_,\n    address addr_\n) pure returns (Token) {\n    return\n        Token.wrap(\n            TokenSpecType.unwrap(spec_) |\n                bytes32((bytes32(uint256(id_)) << ID_SHIFT) & ID_MASK) |\n                bytes32(uint256(uint160(addr_)))\n        );\n}\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n\ninterface IPool {\n    function poolParams() external view returns (bytes memory);\n}\n\ninterface ISwap is IPool {\n    function velocore__execute(\n        address user,\n        Token[] calldata tokens,\n        int128[] memory amounts,\n        bytes calldata data\n    ) external returns (int128[] memory, int128[] memory);\n\n    function swapType() external view returns (string memory);\n\n    function listedTokens() external view returns (Token[] memory);\n\n    function lpTokens() external view returns (Token[] memory);\n\n    function underlyingTokens(Token lp) external view returns (Token[] memory);\n    //function spotPrice(Token token, Token base) external view returns (uint256);\n}\n\ninterface IGauge is IPool {\n    /**\n     * @dev This method is called by Vault.execute().\n     * the parameters and return values are the same as velocore__execute.\n     * The only difference is that the vault will call velocore__emission before calling velocore__gauge.\n     */\n    function velocore__gauge(\n        address user,\n        Token[] calldata tokens,\n        int128[] memory amounts,\n        bytes calldata data\n    ) external returns (int128[] memory deltaGauge, int128[] memory deltaPool);\n\n    /**\n     * @dev This method is called by Vault.execute() before calling velocore__emission or changing votes.\n     *\n     * The vault will credit emitted VC into the gauge balance.\n     * IGauge is expected to update its internal ledger.\n     * @param newEmissions newly emitted VCs since last emission\n     */\n    function velocore__emission(uint256 newEmissions) external;\n\n    function stakeableTokens() external view returns (Token[] memory);\n\n    function stakedTokens(\n        address user\n    ) external view returns (uint256[] memory);\n\n    function stakedTokens() external view returns (uint256[] memory);\n\n    function emissionShare(address user) external view returns (uint256);\n\n    function naturalBribes() external view returns (Token[] memory);\n}\n\ninterface IConverter {\n    /**\n     * @dev This method is called by Vault.execute().\n     * Vault will transfer any positively specified amounts directly to the IConverter before calling velocore__convert.\n     *\n     * Instead of returning balance delta numbers, IConverter is expected to directly transfer outputs back to vault.\n     * Vault will measure the difference, and credit the user.\n     */\n    function velocore__convert(\n        address user,\n        Token[] calldata tokens,\n        int128[] memory amounts,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBribe is IPool {\n    /**\n     * @dev This method is called when someone vote/harvest from/to a @param gauge,\n     * and when this IBribe happens to be attached to the gauge.\n     *\n     * Attachment can happen without IBribe's permission. Implementations must verify that @param gauge is correct.\n     *\n     * Returns balance deltas; their net differences are credited as bribe.\n     * deltaExternal must be zero or negative; Vault will take specified amounts from the contract's balance\n     *\n     * @param  gauge  the gauge to bribe for.\n     * @param  elapsed  elapsed time after last call; can be used to save gas.\n     */\n    function velocore__bribe(\n        IGauge gauge,\n        uint256 elapsed\n    )\n        external\n        returns (\n            Token[] memory bribeTokens,\n            int128[] memory deltaGauge,\n            int128[] memory deltaPool,\n            int128[] memory deltaExternal\n        );\n\n    function bribeTokens(IGauge gauge) external view returns (Token[] memory);\n\n    function bribeRates(IGauge gauge) external view returns (uint256[] memory);\n}\n\ninterface IFacet {\n    function initializeFacet() external;\n}\n\ninterface IFactory {\n    function pools(Token quote, Token base) external view returns (IPool pool);\n}\n\nstruct VelocoreOperation {\n    bytes32 poolId;\n    bytes32[] tokenInformations;\n    bytes data;\n}\n\ninterface IVault {\n    event Swap(\n        ISwap indexed pool,\n        address indexed user,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event Gauge(\n        IGauge indexed pool,\n        address indexed user,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event Convert(\n        IConverter indexed pool,\n        address indexed user,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event Vote(IGauge indexed pool, address indexed user, int256 voteDelta);\n    event UserBalance(\n        address indexed to,\n        address indexed from,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event BribeAttached(IGauge indexed gauge, IBribe indexed bribe);\n    event BribeKilled(IGauge indexed gauge, IBribe indexed bribe);\n    event GaugeKilled(IGauge indexed gauge, bool killed);\n\n    function notifyInitialSupply(Token, uint128, uint128) external;\n\n    function attachBribe(IGauge gauge, IBribe bribe) external;\n\n    function killBribe(IGauge gauge, IBribe bribe) external;\n\n    function killGauge(IGauge gauge, bool t) external;\n\n    function ballotToken() external returns (Token);\n\n    function emissionToken() external returns (Token);\n\n    function execute(\n        Token[] calldata tokenRef,\n        int128[] memory deposit,\n        VelocoreOperation[] calldata ops\n    ) external payable;\n\n    function query(\n        address user,\n        Token[] calldata tokenRef,\n        int128[] memory deposit,\n        VelocoreOperation[] calldata ops\n    ) external returns (int128[] memory);\n\n    function admin_setFunctions(\n        address implementation,\n        bytes4[] calldata sigs\n    ) external;\n\n    function admin_addFacet(IFacet implementation) external;\n\n    function admin_setAuthorizer(IAuthorizer auth_) external;\n\n    function inspect(address lens, bytes memory data) external;\n}\n\nuint8 constant VC_POOL_SWAP = 0;\nuint8 constant VC_POOL_GAUGE = 1;\n\nuint8 constant VC_EXACTLY = 0;\nuint8 constant VC_AT_MOST = 1;\nuint8 constant VC_ALL = 2;\n"
    },
    "contracts/libraries/SafeToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface ERC20Interface {\n    function balanceOf(address user) external view returns (uint256);\n}\n\nlibrary SafeToken {\n    function myBalance(address token) internal view returns (uint256) {\n        return ERC20Interface(token).balanceOf(address(this));\n    }\n\n    function balanceOf(\n        address token,\n        address user\n    ) internal view returns (uint256) {\n        return ERC20Interface(token).balanceOf(user);\n    }\n\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeApprove\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransfer\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransferFrom\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"!safeTransferETH\");\n    }\n}\n"
    },
    "contracts/RewardManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./interfaces/VelocoreInterfaces.sol\";\nimport \"./libraries/SafeToken.sol\";\n\nimport \"./StakedDistributor.sol\";\n\ncontract RewardManager is OwnableUpgradeable {\n    using SafeToken for address;\n\n    StakedDistributor public immutable sMendi =\n        StakedDistributor(0x150b1e51738CdF0cCfe472594C62d7D6074921CA);\n    StakedDistributor public immutable uMendi =\n        StakedDistributor(0xcf8deDCdC62317beAEdfBee3C77C08425F284486);\n\n    /* Tokens */\n    address public immutable mendi = 0x43E8809ea748EFf3204ee01F08872F063e44065f;\n    address public immutable usdc = 0x176211869cA2b568f2A7D4EE941E073a821EE1ff;\n    address public immutable lvc = 0xcc22F6AA610D1b2a0e89EF228079cB3e1831b1D1;\n\n    /* Velocore */\n    IVault public constant vault =\n        IVault(0x1d0188c4B276A09366D05d6Be06aF61a73bC7535);\n    IFactory public constant factory =\n        IFactory(0xBe6c6A389b82306e88d74d1692B67285A9db9A47);\n    Token public mendiToken;\n    Token public usdcToken;\n    Token public lvcToken;\n    IPool public mendiUSDCPool;\n    Token public mendiUSDCPoolToken;\n\n    function initialize() public initializer {\n        __Ownable_init();\n\n        mendiToken = toToken(IERC20(address(mendi)));\n        usdcToken = toToken(IERC20(address(usdc)));\n        lvcToken = toToken(IERC20(address(lvc)));\n\n        mendiUSDCPool = factory.pools(mendiToken, usdcToken);\n        mendiUSDCPoolToken = toToken(IERC20(address(mendiUSDCPool)));\n    }\n\n    function addRewards(uint256 usdcAmount, uint256 lvcAmount) public {\n        // calculate supplies\n        uint256 sMendiSupply = sMendi.totalSupply();\n        uint256 uMendiSupply = uMendi.totalSupply();\n        uint256 totalSupply = sMendiSupply + uMendiSupply;\n\n        // add lvc\n        if (lvcAmount > 0) {\n            pullTokenInternal(lvc, lvcAmount);\n            addTokenRewardInternal(lvc, uMendiSupply, totalSupply);\n        }\n\n        // add usdc\n        if (usdcAmount > 0) {\n            pullTokenInternal(usdc, usdcAmount);\n            addUSDCRewardInternal(uMendiSupply, totalSupply);\n        }\n    }\n\n    function pullTokenInternal(address token, uint256 amount) internal {\n        if (amount == type(uint256).max) {\n            amount = token.balanceOf(msg.sender);\n        }\n\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    function addTokenRewardInternal(\n        address token,\n        uint256 uMendiSupply,\n        uint256 totalSupply\n    ) internal {\n        uint256 amount = token.myBalance();\n        if (amount == 0) return;\n\n        // add to uMendi\n        uint256 uMendiAmount = (amount * uMendiSupply) / totalSupply;\n        address uRewardHolder = uMendi.claimable();\n        token.safeTransfer(uRewardHolder, uMendiAmount);\n\n        // add to sMendi\n        uint256 sMendiAmount = amount = token.myBalance();\n        address sRewardHolder = sMendi.claimable();\n        token.safeTransfer(sRewardHolder, sMendiAmount);\n    }\n\n    function addUSDCRewardInternal(\n        uint256 uMendiSupply,\n        uint256 totalSupply\n    ) internal {\n        uint256 amount = usdc.myBalance();\n        if (amount == 0) return;\n\n        // add to uMendi\n        uint256 uMendiUSDCAmount = (amount * uMendiSupply) / totalSupply;\n        address uRewardHolder = uMendi.claimable();\n        usdc.safeTransfer(uRewardHolder, uMendiUSDCAmount);\n\n        // swap usdc to mendi\n        uint256 sMendiUSDCAmount = usdc.myBalance();\n        swapUSDCtoMendiInternal(sMendiUSDCAmount);\n\n        // add to sMendi\n        uint256 mendiAmount = mendi.myBalance();\n        address sRewardHolder = sMendi.claimable();\n        mendi.safeTransfer(sRewardHolder, mendiAmount);\n    }\n\n    function swapUSDCtoMendiInternal(uint256 usdcAmount) internal {\n        usdc.safeApprove(address(vault), usdcAmount);\n\n        run2Internal(\n            0,\n            mendiUSDCPool,\n            VC_POOL_SWAP,\n            usdcToken,\n            VC_EXACTLY,\n            int128(uint128(usdcAmount)),\n            mendiToken,\n            VC_AT_MOST,\n            0\n        );\n    }\n\n    function run2Internal(\n        uint256 value,\n        IPool pool,\n        uint8 method,\n        Token t1,\n        uint8 m1,\n        int128 a1,\n        Token t2,\n        uint8 m2,\n        int128 a2\n    ) internal {\n        Token[] memory tokens = new Token[](2);\n\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\n\n        tokens[0] = (t1);\n        tokens[1] = (t2);\n\n        ops[0].poolId =\n            bytes32(bytes1(method)) |\n            bytes32(uint256(uint160(address(pool))));\n        ops[0].tokenInformations = new bytes32[](2);\n        ops[0].data = \"\";\n\n        ops[0].tokenInformations[0] =\n            bytes32(bytes1(0x00)) |\n            bytes32(bytes2(uint16(m1))) |\n            bytes32(uint256(uint128(uint256(int256(a1)))));\n        ops[0].tokenInformations[1] =\n            bytes32(bytes1(0x01)) |\n            bytes32(bytes2(uint16(m2))) |\n            bytes32(uint256(uint128(uint256(int256(a2)))));\n        vault.execute{value: value}(tokens, new int128[](2), ops);\n    }\n}\n"
    },
    "contracts/StakedDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"./libraries/SafeToken.sol\";\nimport \"./Distributor.sol\";\n\ncontract StakedDistributor is Distributor, ERC20Upgradeable {\n    using SafeToken for address;\n    struct Withdrawal {\n        uint256 amount;\n        uint256 releaseTime;\n    }\n\n    event Withdraw(address indexed user, uint256 amount);\n\n    uint256 public withdrawalPendingTime;\n    mapping(address => Withdrawal) public withdrawal;\n\n    address public underlying;\n\n    function initialize(\n        address claimable_,\n        string memory name,\n        string memory symbol,\n        address underlying_\n    ) public initializer {\n        __Distributor_init(claimable_);\n        __ERC20_init(name, symbol);\n\n        underlying = underlying_;\n        withdrawalPendingTime = 7 * 1 days;\n    }\n\n    /* Admin functions */\n    function _setWithdrawalPendingTime(\n        uint256 withdrawalPendingTime_\n    ) public onlyOwner {\n        withdrawalPendingTime = withdrawalPendingTime_;\n    }\n\n    function mint(uint256 amount) public {\n        underlying.safeTransferFrom(msg.sender, address(this), amount);\n        _mint(msg.sender, amount);\n    }\n\n    function burn(uint256 amount) public {\n        if (amount > 0) {\n            _burn(msg.sender, amount);\n\n            Withdrawal storage withdrawal_ = withdrawal[msg.sender];\n            withdrawal_.amount = withdrawal_.amount + amount;\n            withdrawal_.releaseTime = block.timestamp + withdrawalPendingTime;\n        }\n    }\n\n    function withdraw() public {\n        Withdrawal storage withdrawal_ = withdrawal[msg.sender];\n        require(\n            block.timestamp >= withdrawal_.releaseTime,\n            \"StakedDistributor: not released\"\n        );\n        uint256 amount = withdrawal_.amount;\n        withdrawal_.amount = 0;\n        underlying.safeTransfer(msg.sender, amount);\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 /* amount */\n    ) internal override {\n        if (from != address(0)) {\n            _editRecipientInternal(from, balanceOf(from));\n        }\n\n        if (to != address(0)) {\n            _editRecipientInternal(to, balanceOf(to));\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}